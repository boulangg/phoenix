/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstdint>

namespace kernel::core {

namespace ExceptionHandlers {

void setupHandlers();

}

}

#ifdef __cplusplus
extern "C"
{
#endif

// C functions
void generic_exception_handler(std::uint32_t irq, std::uint32_t errocode);
void generic_interrupt_handler(std::uint32_t irq);

// ASM functions
extern std::uint64_t read_CR2();

// Hardware Exception Handlers
#define EXCEPTION_HANDLER_NAME(num)        EXC_##num##_HANDLER
#define EXCEPTION_HANDLER_NAME_UINT64(num) reinterpret_cast<std::uint64_t>(EXCEPTION_HANDLER_NAME(num))
#define DEFINE_EXCEPTION_HANDLER(num)      extern "C" void EXCEPTION_HANDLER_NAME(num)();

DEFINE_EXCEPTION_HANDLER(00);
DEFINE_EXCEPTION_HANDLER(01);
DEFINE_EXCEPTION_HANDLER(02);
DEFINE_EXCEPTION_HANDLER(03);
DEFINE_EXCEPTION_HANDLER(04);
DEFINE_EXCEPTION_HANDLER(05);
DEFINE_EXCEPTION_HANDLER(06);
DEFINE_EXCEPTION_HANDLER(07);
DEFINE_EXCEPTION_HANDLER(08);
DEFINE_EXCEPTION_HANDLER(09);
DEFINE_EXCEPTION_HANDLER(0A);
DEFINE_EXCEPTION_HANDLER(0B);
DEFINE_EXCEPTION_HANDLER(0C);
DEFINE_EXCEPTION_HANDLER(0D);
DEFINE_EXCEPTION_HANDLER(0E);
DEFINE_EXCEPTION_HANDLER(0F);
DEFINE_EXCEPTION_HANDLER(10);
DEFINE_EXCEPTION_HANDLER(11);
DEFINE_EXCEPTION_HANDLER(12);
DEFINE_EXCEPTION_HANDLER(13);
DEFINE_EXCEPTION_HANDLER(14);
DEFINE_EXCEPTION_HANDLER(15);
DEFINE_EXCEPTION_HANDLER(16);
DEFINE_EXCEPTION_HANDLER(17);
DEFINE_EXCEPTION_HANDLER(18);
DEFINE_EXCEPTION_HANDLER(19);
DEFINE_EXCEPTION_HANDLER(1A);
DEFINE_EXCEPTION_HANDLER(1B);
DEFINE_EXCEPTION_HANDLER(1C);
DEFINE_EXCEPTION_HANDLER(1D);
DEFINE_EXCEPTION_HANDLER(1E);
DEFINE_EXCEPTION_HANDLER(1F);

// PIC Interrupt Handlers
#define INTERRUPT_HANDLER_NAME(num)        INT_##num##_HANDLER
#define INTERRUPT_HANDLER_NAME_UINT64(num) reinterpret_cast<std::uint64_t>(INTERRUPT_HANDLER_NAME(num))
#define DEFINE_INTERRUPT_HANDLER(num)      extern "C" void INTERRUPT_HANDLER_NAME(num)();

DEFINE_INTERRUPT_HANDLER(00);
DEFINE_INTERRUPT_HANDLER(01);
DEFINE_INTERRUPT_HANDLER(02);
DEFINE_INTERRUPT_HANDLER(03);
DEFINE_INTERRUPT_HANDLER(04);
DEFINE_INTERRUPT_HANDLER(05);
DEFINE_INTERRUPT_HANDLER(06);
DEFINE_INTERRUPT_HANDLER(07);
DEFINE_INTERRUPT_HANDLER(08);
DEFINE_INTERRUPT_HANDLER(09);
DEFINE_INTERRUPT_HANDLER(0A);
DEFINE_INTERRUPT_HANDLER(0B);
DEFINE_INTERRUPT_HANDLER(0C);
DEFINE_INTERRUPT_HANDLER(0D);
DEFINE_INTERRUPT_HANDLER(0E);
DEFINE_INTERRUPT_HANDLER(0F);

#ifdef __cplusplus
}
#endif
