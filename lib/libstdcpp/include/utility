/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <details/hash.h>
#include <type_traits>

namespace std {

size_t nearest_power_2(size_t num);

template <class T>
constexpr std::remove_reference_t<T>&& move(T&& t) noexcept
{
    return static_cast<std::remove_reference_t<T>&&>(t);
}

template <class T>
void swap(T& a, T& b) noexcept
{
    T tmp = std::move(a);
    a = std::move(b);
    b = std::move(tmp);
}

template <class T>
constexpr T&& forward(std::remove_reference_t<T>& t) noexcept
{
    return static_cast<T&&>(t);
}

template <class T>
constexpr T&& forward(std::remove_reference_t<T>&& t) noexcept
{
    return static_cast<T&&>(t);
}

template <class T1, class T2>
struct pair
{
    typedef T1 first_type;
    typedef T2 second_type;

    first_type first;
    second_type second;

    pair() : first(), second() {}
    template <class U, class V>
    pair(const pair<U, V>& pr) : first(pr.first), second(pr.second)
    {}
    pair(const first_type& a, const second_type& b) : first(a), second(b) {}
};

template <class T1, class T2, class U1, class U2>
constexpr bool operator==(const std::pair<T1, T2>& lhs, const std::pair<U1, U2>& rhs)
{
    return (lhs.first == rhs.first) && (lhs.second == rhs.second);
}

template <class T1, class T2, class V1 = std::decay<T1>::type, class V2 = std::decay<T2>::type>
constexpr std::pair<V1, V2> make_pair(T1&& t, T2&& u)
{
    return pair<V1, V2>(t, u);
}

struct in_place_t
{
    explicit in_place_t() = default;
};
inline constexpr in_place_t in_place{};

template <class T>
struct in_place_type_t
{
    explicit in_place_type_t() = default;
};
template <class T>
inline constexpr in_place_type_t<T> in_place_type{};

template <std::size_t I>
struct in_place_index_t
{
    explicit in_place_index_t() = default;
};
template <std::size_t I>
inline constexpr in_place_index_t<I> in_place_index{};

template <typename T, typename... Rest>
inline void hashCombine(std::size_t& seed, const T& v, Rest&&... rest)
{
    hash<T> hasher;
    seed ^= hasher(v) + (seed << 6) + (seed >> 2);
    // hashCombine(seed, std::forward<Rest>(rest)...);
    (int[]){0, (hashCombine(seed, std::forward<Rest>(rest)), 0)...};
}

template <class U, class V>
struct hash<pair<U, V>> : public __hash_base<size_t, pair<U, V>>
{
    size_t operator()(const pair<U, V>& val) const noexcept
    {
        std::size_t seed = 0;
        hashCombine(seed, val.first, val.second);
        return seed;
    }
};

}
