/*
 * Copyright (c) 2016-2021 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstddef>
#include <type_traits>

namespace std {

template< class T >
void swap(T& a, T& b)
{
	T tmp = a;
	a = b;
	b = tmp;
}

size_t nearest_power_2(size_t num);

template<typename T>
constexpr typename std::remove_reference<T>::type&& move(T&& t)
{
	return static_cast<typename std::remove_reference<T>::type&&>(t);
}

template <class T1, class T2>
struct pair
{
	typedef T1 first_type;
	typedef T2 second_type;

	first_type first;
	second_type second;

	pair() : first(), second()
	{}
	template <class U, class V>
	pair(const pair<U, V>& pr) :
		first(pr.first), second(pr.second)
	{}
	pair(const first_type& a, const second_type& b) :
		first(a), second(b)
	{}
};

}
