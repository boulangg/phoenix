/*
 * Copyright (c) 2016 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */


#ifndef _STDCPP_ALGORITHM_
#define _STDCPP_ALGORITHM_

namespace std {

// Non-modifying sequence operations
template <class InputIterator, class T>
InputIterator find (InputIterator first, InputIterator last, const T& val) {
	for (auto it = first; it != last; ++it) {
		if (*first == val) {
			return first;
		}
	}
	return last;
}

// Min/max
template <class T>
const T& min(const T& a, const T& b) {
	return !(b < a) ? a : b;
}

template <class T, class Compare>
const T& min(const T& a, const T& b, Compare comp) {
	return !comp(b, a) ? a : b;
}

template <class T>
const T& max(const T& a, const T& b) {
	return (a < b) ? b : a;
}

template <class T, class Compare>
const T& max(const T& a, const T& b, Compare comp) {
	return comp(a, b) ? b : a;
}

// Heap
template <class RandomAccessIterator, class Compare>
void push_heap(RandomAccessIterator first, RandomAccessIterator last);

template <class RandomAccessIterator, class Compare>
void push_heap(RandomAccessIterator first, RandomAccessIterator last,
		Compare comp);

template <class RandomAccessIterator, class Compare>
void pop_heap(RandomAccessIterator first, RandomAccessIterator last,
		Compare comp);

template <class RandomAccessIterator, class Compare>
void make_heap(RandomAccessIterator first, RandomAccessIterator last,
		Compare comp );

template <class RandomAccessIterator, class Compare>
void remove_heap(RandomAccessIterator first, RandomAccessIterator item,
		RandomAccessIterator last, Compare comp);

template <class RandomAccessIterator, class Compare>
void sort_heap(RandomAccessIterator first, RandomAccessIterator last,
		Compare comp);

template <class RandomAccessIterator, class Compare>
bool is_heap(RandomAccessIterator first, RandomAccessIterator last,
		Compare comp);

template <class RandomAccessIterator, class Compare>
RandomAccessIterator is_heap_until(RandomAccessIterator first,
		RandomAccessIterator last, Compare comp);
}

#endif // _STDCPP_ALGORITHM_
