/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstddef>
#include <details/hash.h>

namespace std {

template <class charT>
class char_traits
{
public:
    typedef charT char_type;
    static size_t length(const char_type* s);
    static char_type* copy(char_type* dest, const char_type* src, size_t n);
    static void assign(char_type& r, const char_type& c) noexcept;
};

template <>
class char_traits<char>
{
public:
    typedef char char_type;
    typedef int int_type;
    static size_t length(const char_type* s);
    static char_type* copy(char_type* dest, const char_type* src, size_t n);
    static void assign(char_type& r, const char_type& c) noexcept;
};

class string
{
public:
    string();
    string(const char* s);
    string(const char* s, size_t n);
    string(const string& s);
    string(size_t n, char c);

    string(string&& s);
    ~string();

    string& operator+=(const string& str);
    string& operator+=(const char* str);

    string& operator=(const string& str);
    string& operator=(const char* str);
    string& operator=(string&& str);

    char& operator[](int pos);
    const char& operator[](int pos) const;

    const char* c_str() const;

    bool empty() const noexcept;

    constexpr size_t size() const noexcept
    {
        return _size;
    }

    size_t length() const;
    size_t capacity() const;

    string& append(const char* s, size_t n);
    void push_back(char c);

    constexpr size_t find(const string& str, size_t pos = 0) const noexcept;

    constexpr size_t find(char ch, size_t pos) const noexcept
    {
        while (pos < size()) {
            if (_data[pos] == ch) {
                return pos;
            }
            ++pos;
        }
        return npos;
    }

    int compare(const string& str) const;
    int compare(const char* s) const;

    bool starts_with(std::string sv) const noexcept;
    bool starts_with(char ch) const noexcept;
    bool starts_with(const char* s) const;

    string substr(size_t pos = 0, size_t len = string::npos) const;

    static const size_t npos = static_cast<size_t>(-1);

private:
    size_t _size;
    size_t _capacity;
    char* _data;
};

string operator+(const string& lhs, const string& rhs);
bool operator==(const string& lhs, const string& rhs);

std::string to_string(int value);
std::string to_string(long value);
std::string to_string(long long value);
std::string to_string(unsigned value);
std::string to_string(unsigned long value);
std::string to_string(unsigned long long value);
std::string to_string(float value);
std::string to_string(double value);
std::string to_string(long double value);

template <>
struct hash<string> : public __hash_base<size_t, string>
{
    size_t operator()(const string& val) const noexcept
    {
        hash<char> hasher;
        size_t seed = hasher(0);
        for (size_t i = 0; i < val.size(); ++i) {
            seed += hasher(val[i]);
            seed = (seed << 8) - seed;
        }
        return seed;
    }
};

}
