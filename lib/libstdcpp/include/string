/*
 * Copyright (c) 2016 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#ifndef PHOENIX_STRING
#define PHOENIX_STRING

#include <cstddef>

namespace std {

template <class charT>
class char_traits {
public:
	typedef charT char_type;
	static size_t length(const char_type* s);
	static char_type* copy(char_type* dest, const char_type* src, size_t n);
	static void assign(char_type& r, const char_type& c) noexcept;
};

template <>
class char_traits<char> {
public:
	typedef char char_type;
	typedef int int_type;
	static size_t length(const char_type* s);
	static char_type* copy(char_type* dest, const char_type* src, size_t n);
	static void assign(char_type& r, const char_type& c) noexcept;
};

class string {
public:
	string();
	string(const char* s);
	string(const string& s);

	string(string&& s);
	~string();

	string& operator+=(const string& str);
	string& operator+=(const char* str);

	string& operator=(const string& str);
	string& operator=(const char* str);
	string& operator=(string&& str);

	char& operator[](int pos);
	const char& operator[](int pos) const;

	string& append (const char* s, size_t n);

	size_t size() const;
	size_t length() const;
	size_t capacity() const;

	int compare(const string& str) const;
	int compare(const char* s) const;

	const char* c_str() const;
private:
	size_t _size;
	size_t _capacity;
	char* _data;
};

}



#endif //PHOENIX_STRING_H
