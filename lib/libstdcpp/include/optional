/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <compare>
#include <exception>
#include <functional>
#include <initializer_list>
#include <memory>
#include <type_traits>
#include <utility>

namespace std {

class bad_optional_access : public exception
{
public:
    bad_optional_access() = default;
    virtual ~bad_optional_access() = default;

    const char* what() const noexcept override
    {
        return "bad optional access";
    }
};

struct nullopt_t
{
    explicit constexpr nullopt_t(int) {}
};

inline constexpr nullopt_t nullopt{0};

template <class T>
class optional
{
public:
    template <class X>
    struct __is_optional : false_type
    {};
    template <class X>
    struct __is_optional<std::optional<X>> : true_type
    {};
    template <class X>
    static constexpr bool __is_optional_v = __is_optional<X>::value;

    template <typename _T, typename _U>
    using __is_constructible_or_convertible =
        std::disjunction<std::is_constructible<_T, const optional<_U>&>, std::is_constructible<_T, optional<_U>&>,
                         std::is_constructible<_T, const optional<_U>&&>, std::is_constructible<_T, optional<_U>&&>,
                         std::is_convertible<const optional<_U>&, _T>, std::is_convertible<optional<_U>&, _T>,
                         std::is_convertible<const optional<_U>&&, _T>, std::is_convertible<optional<_U>&&, _T>>;
    template <typename _T, typename _U>
    static constexpr bool __is_constructible_or_convertible_v = __is_constructible_or_convertible<_T, _U>::value;

    template <typename _T, typename _U>
    using ___is_assignable =
        std::disjunction<std::is_assignable<_T, const optional<_U>&>, std::is_assignable<_T, optional<_U>&>,
                         std::is_assignable<_T, const optional<_U>&&>, std::is_assignable<_T, optional<_U>&&>>;
    template <typename _T, typename _U>
    static constexpr bool __is_assignable_v = ___is_assignable<_T, _U>::value;

    // template <typename... Cond>
    // using Requires = enable_if_t<conjunction_v<Cond...>, bool>;

    // template <typename _T, typename _U>
    // using _is_optional_convertible =
    //     conjunction<is_constructible<_T, const optional<_U>&>, is_constructible<_T, optional<_U>&>,
    //                 is_constructible<_T, const optional<_U>&&>, is_constructible<_T, optional<_U>&&>,
    //                 is_convertible<const optional<_U>&, _T>, is_convertible<optional<_U>&, _T>,
    //                 is_convertible<const optional<_U>&&, _T>, is_convertible<optional<_U>&&, _T>>;

    // template <typename _T, typename _U>
    // using _is_optional_assignable =
    //     disjunction<_is_optional_convertible<_T, _U>, is_assignable<_T&, optional<_U>&>,
    //                 is_assignable<_T&, const optional<_U>&>, is_assignable<_T&, optional<_U>&&>,
    //                 is_assignable<_T&, const optional<_U>&&>>;

    // template <class X, class Y>
    // static constexpr bool convertsFromAnyCvref =
    //     disjunction_v<is_constructible<X, Y&>, is_convertible<Y&, X>, is_constructible<X, Y>, is_convertible<Y, X>,
    //                   is_constructible<X, const Y&>, is_convertible<const Y&, X>, is_constructible<X, const Y>,
    //                   is_convertible<const Y, X>>;

public:
    using value_type = T;

private:
    bool _has_value = false;
    T _value;

public:
    // Empty constructor
    constexpr optional() noexcept : _has_value(false), _value() {}
    constexpr optional(std::nullopt_t) noexcept : _has_value(false), _value() {}

    //// Copy constructor
    constexpr optional(const optional& other)
        requires(!is_copy_constructible_v<T>)
    = delete;
    constexpr optional(const optional& other)
        requires(std::is_copy_constructible_v<T> && !std::is_trivially_copy_constructible_v<T>)
        : _has_value(other._has_value), _value(*other)
    {}
    constexpr optional(const optional& other)
        requires(std::is_trivially_copy_constructible_v<T>)
    = default;

    // Move constructor
    constexpr optional(optional&& other) noexcept(std::is_nothrow_move_constructible_v<T>)
        requires(std::is_move_constructible_v<T> && !std::is_trivially_move_constructible_v<T>)
        : _has_value(other._has_value), _value(std::move(*other))
    {}
    constexpr optional(optional&& other) noexcept(std::is_nothrow_move_constructible_v<T>)
        requires(std::is_trivially_move_constructible_v<T>)
    = default;

    // Converting copy constructor
    template <class U>
    constexpr explicit(!std::is_convertible_v<const U&, T>) optional(const optional<U>& other)
        requires(std::is_constructible_v<T, const U&> &&
                 (std::is_same_v<remove_cvref_t<T>, bool> || !__is_constructible_or_convertible_v<T, U>))
        : _has_value(other.has_value()), _value()
    {
        if (_has_value) {
            _value = *other;
        }
    }

    // Converting move constructor
    template <class U>
    constexpr explicit(!std::is_convertible_v<U&&, T>) optional(optional<U>&& other)
        requires(std::is_constructible_v<T, U &&> &&
                 (std::is_same_v<remove_cvref_t<T>, bool> || !__is_constructible_or_convertible_v<T, U>))
        : _has_value(other.has_value())
    {
        if (_has_value) {
            _value = std::move(*other);
        }
    }

    // inplace constructor
    template <class... Args>
    constexpr explicit optional(std::in_place_t, Args&&... args)
        requires(std::is_constructible_v<T, Args...>)
        : _has_value(true), _value(std::forward<Args>(args)...)
    {}

    // inplace constructor with intializer list
    template <class U, class... Args>
    constexpr explicit optional(std::in_place_t, std::initializer_list<U> ilist, Args&&... args)
        requires(std::is_constructible_v<T, std::initializer_list<U>&, Args...>)
        : _has_value(true), _value(ilist, std::forward<Args>(args)...)
    {}

    // inplace constructor with lvalue
    template <class U = T>
    constexpr explicit(!std::is_convertible_v<U&&, T>) optional(U&& value)
        requires(std::is_constructible_v<T, U &&> && !std::is_same_v<std::remove_cvref_t<U>, std::in_place_t> &&
                 !std::is_same_v<std::remove_cvref_t<U>, optional<T>> &&
                 (!std::is_same_v<std::remove_cvref_t<T>, bool> || !__is_optional_v<std::remove_cvref_t<U>>))
        : _has_value(true), _value(std::forward<U>(value))
    {}

    constexpr ~optional()
        requires(!std::is_trivially_destructible_v<T>)
    {
        if (has_value()) {
            value().T::~T();
        }
    }

    constexpr ~optional()
        requires(std::is_trivially_destructible_v<T>)
    = default;

    // nullopt assignment
    constexpr optional& operator=(std::nullopt_t) noexcept
    {
        reset();
        return *this;
    }

    // Copy assignment
    constexpr optional& operator=(const optional& other)
        requires(!std::is_copy_constructible_v<T> || !std::is_copy_assignable_v<T>)
    = delete;
    constexpr optional& operator=(const optional& other)
        requires(std::is_copy_constructible_v<T> && std::is_copy_assignable_v<T> &&
                 !(std::is_trivially_copy_constructible_v<T> && std::is_trivially_copy_assignable_v<T> &&
                   std::is_trivially_destructible_v<T>))
    {
        if (other._has_value) {
            if (_has_value) {
                _has_value = true;
                _value = *other;
            } else {
                _has_value = true;
                _value.T::T(*other);
            }
        } else {
            if (_has_value) {
                reset();
            }
        }

        return *this;
    }
    constexpr optional& operator=(const optional& other)
        requires(std::is_trivially_copy_constructible_v<T> && std::is_trivially_copy_assignable_v<T> &&
                 std::is_trivially_destructible_v<T>)
    = default;

    // Move assignment
    constexpr optional& operator=(optional&& other) noexcept(std::is_nothrow_move_assignable_v<T> &&
                                                             std::is_nothrow_move_constructible_v<T>)
        requires(std::is_move_constructible_v<T> && std::is_move_assignable_v<T> &&
                 !(std::is_trivially_move_constructible_v<T> && std::is_trivially_move_assignable_v<T> &&
                   std::is_trivially_destructible_v<T>))
    {
        if (other._has_value) {
            if (_has_value) {
                _has_value = true;
                _value = std::move(*other);
            } else {
                _has_value = true;
                _value.T::T(std::move(*other));
            }
        } else {
            if (_has_value) {
                reset();
            }
        }

        return *this;
    }
    constexpr optional& operator=(optional&& other) noexcept(std::is_nothrow_move_assignable_v<T> &&
                                                             std::is_nothrow_move_constructible_v<T>)
        requires(std::is_trivially_move_constructible_v<T> && std::is_trivially_move_assignable_v<T> &&
                 std::is_trivially_destructible_v<T>)
    = default;

    // Perfect-forwarded assignment
    template <class U = T>
    optional& operator=(U&& value)
        requires(!__is_optional_v<std::remove_cvref_t<U>> && std::is_constructible_v<T, U> &&
                 std::is_assignable_v<T&, U> && (std::is_scalar_v<T> || !std::is_same_v<std::decay_t<U>, T>))
    {
        if (_has_value) {
            _has_value = true;
            _value = std::forward<U>(value);
        } else {
            _has_value = true;
            _value.T::T(std::forward<U>(value));
        }

        return *this;
    }

    // Converting copy assignment
    template <class U>
    optional& operator=(const optional<U>& other)
        requires(__is_constructible_or_convertible_v<T, U> && __is_assignable_v<T, U> &&
                 std::is_constructible_v<T, const U&> && std::is_assignable_v<T&, const U&>)
    {
        if (other._has_value) {
            if (_has_value) {
                _has_value = true;
                _value = *other;
            } else {
                _has_value = true;
                _value.T::T(*other);
            }
        } else {
            if (_has_value) {
                reset();
            }
        }

        return *this;
    }

    // Converting move assignemnt
    template <class U>
    optional& operator=(optional<U>&& other)
        requires(__is_constructible_or_convertible_v<T, U> && __is_assignable_v<T, U> &&
                 std::is_constructible_v<T, U> && std::is_assignable_v<T&, U>)
    {
        if (other._has_value) {
            if (_has_value) {
                _has_value = true;
                _value = std::move(*other);
            } else {
                _has_value = true;
                _value.T::T(*other);
            }
        } else {
            if (_has_value) {
                reset();
            }
        }

        return *this;
    }

    // Observers
    constexpr const T* operator->() const noexcept
    {
        return &_value;
    }

    constexpr T* operator->() noexcept
    {
        return &_value;
    }

    constexpr const T& operator*() const& noexcept
    {
        return _value;
    }

    constexpr T& operator*() & noexcept
    {
        return _value;
    }

    constexpr const T&& operator*() const&& noexcept
    {
        return std::move(_value);
    }

    constexpr T&& operator*() && noexcept
    {
        return std::move(_value);
    }

    constexpr explicit operator bool() const noexcept
    {
        return _has_value;
    }

    constexpr bool has_value() const noexcept
    {
        return _has_value;
    }

    constexpr T& value() &
    {
        if (_has_value) {
            return _value;
        } else {
            throw bad_optional_access();
        }
    }

    constexpr const T& value() const&
    {
        if (_has_value) {
            return _value;
        } else {
            throw bad_optional_access();
        }
    }

    constexpr T&& value() &&
    {
        if (_has_value) {
            return std::move(_value);
        } else {
            throw bad_optional_access();
        }
    }

    constexpr const T&& value() const&&
    {
        if (_has_value) {
            return std::move(_value);
        } else {
            throw bad_optional_access();
        }
    }

    template <class U>
    constexpr T value_or(U&& default_value) const&
    {
        if (_has_value) {
            return _value;
        } else {
            return static_cast<T>(std::forward<U>(default_value));
        }
    }

    template <class U>
    constexpr T value_or(U&& default_value) &&
    {
        if (_has_value) {
            return std::move(_value);
        } else {
            return static_cast<T>(std::forward<U>(default_value));
        }
    }

    // Monadic operations
    template <class F>
    constexpr auto and_then(F&& f) &
    {
        if (_has_value) {
            return std::invoke(std::forward<F>(f), **this);
        } else {
            return std::remove_cvref_t<std::invoke_result_t<F, T&>>{};
        }
    }
    template <class F>
    constexpr auto and_then(F&& f) const&
    {
        if (_has_value) {
            return std::invoke(std::forward<F>(f), **this);
        } else {
            return std::remove_cvref_t<std::invoke_result_t<F, const T&>>{};
        }
    }
    template <class F>
    constexpr auto and_then(F&& f) &&
    {
        if (_has_value) {
            return std::invoke(std::forward<F>(f), std::move(**this));
        } else {
            return std::remove_cvref_t<std::invoke_result_t<F, T>>{};
        }
    }
    template <class F>
    constexpr auto and_then(F&& f) const&&
    {
        if (_has_value) {
            return std::invoke(std::forward<F>(f), std::move(**this));
        } else {
            return std::remove_cvref_t<std::invoke_result_t<F, const T>>{};
        }
    }

    // TODO implem: optional::transform
    // template <class F>
    // constexpr auto transform(F&& f) &;
    // template <class F>
    // constexpr auto transform(F&& f) const&;
    // template <class F>
    // constexpr auto transform(F&& f) &&;
    // template <class F>
    // constexpr auto transform(F&& f) const&&;

    template <class F>
    constexpr optional or_else(F&& f) const&
    {
        if (_has_value) {
            return *this;
        } else {
            std::forward<F>(f)();
        }
    }
    template <class F>
    constexpr optional or_else(F&& f) &&
    {
        if (_has_value) {
            return std::move(*this);
        } else {
            return std::forward<F>(f)();
        }
    }

    // Modifiers
    constexpr void swap(optional& other) noexcept(std::is_nothrow_move_constructible_v<T> &&
                                                  std::is_nothrow_swappable_v<T>)
    {
        static_assert(std::is_move_constructible_v<T>, "value_type requires to be move cosntructible");
        if (_has_value && other._has_value) {
            using std::swap;
            swap(_value, other._value);
        } else if (_has_value) {
            std::construct_at<T>(&other._value, std::move(_value));
            // other._value::T(std::move(_value));
            other._has_value = true;
            this->reset();
        } else if (other._has_value) {
            std::construct_at<T>(&_value, std::move(other._value));
            //_value::T(std::move(other._value));
            this->_has_value = true;
            other.reset();
        }
    }

    constexpr void reset() noexcept
    {
        if (_has_value) {
            _value.T::~T();
            _has_value = false;
        }
    }

    template <class... Args>
    constexpr T& emplace(Args&&... args)
    {
        reset();
        std::construct_at<T>(_value, std::forward<Args>(args)...);
        //_value::T(std::forward<Args>(args)...);
        _has_value = true;
        return _value;
    }

    template <class U, class... Args>
    constexpr T& emplace(std::initializer_list<U> ilist, Args&&... args)
        requires(std::is_constructible_v<T, std::initializer_list<U>&, Args && ...>)
    {
        reset();
        _value.T::T(ilist, std::forward<Args>(args)...);
        _has_value = true;
        return _value;
    }
};

// Compare two optional objects
template <class T, class U>
constexpr bool operator==(const optional<T>& lhs, const optional<U>& rhs);

template <class T, std::three_way_comparable_with<T> U>
constexpr std::compare_three_way_result_t<T, U> operator<=>(const optional<T>& lhs, const optional<U>& rhs);

template <class T, class U>
constexpr bool operator==(const optional<T>& lhs, const optional<U>& rhs)
{
    if (bool(lhs) != bool(rhs)) {
        return false;
    } else if (bool(lhs) == false) {
        return true;
    } else {
        return *lhs == *rhs;
    }
}

// template <class T, class U>
// constexpr bool operator!=(const optional<T>& lhs, const optional<U>& rhs)
//{
//     if (bool(lhs) != bool(rhs)) {
//         return false;
//     } else if (bool(lhs) == false) {
//         return true;
//     } else {
//         return *lhs != *rhs;
//     }
// }
//
// template <class T, class U>
// constexpr bool operator<(const optional<T>& lhs, const optional<U>& rhs)
//{
//     if (bool(lhs) != bool(rhs)) {
//         return false;
//     } else if (bool(lhs) == false) {
//         return true;
//     } else {
//         return *lhs < *rhs;
//     }
// }
//
// template <class T, class U>
// constexpr bool operator<=(const optional<T>& lhs, const optional<U>& rhs)
//{
//     if (bool(lhs) != bool(rhs)) {
//         return false;
//     } else if (bool(lhs) == false) {
//         return true;
//     } else {
//         return *lhs <= *rhs;
//     }
// }
//
// template <class T, class U>
// constexpr bool operator>(const optional<T>& lhs, const optional<U>& rhs)
//{
//     if (bool(lhs) != bool(rhs)) {
//         return false;
//     } else if (bool(lhs) == false) {
//         return true;
//     } else {
//         return *lhs > *rhs;
//     }
// }
//
// template <class T, class U>
// constexpr bool operator>=(const optional<T>& lhs, const optional<U>& rhs)
//{
//     if (bool(lhs) != bool(rhs)) {
//         return false;
//     } else if (bool(lhs) == false) {
//         return true;
//     } else {
//         return *lhs >= *rhs;
//     }
// }

template <class T, std::three_way_comparable_with<T> U>
constexpr std::compare_three_way_result_t<T, U> operator<=>(const optional<T>& lhs, const optional<U>& rhs)
{
    if (bool(lhs) && bool(rhs)) {
        *lhs <=> *rhs;
    } else {
        bool(lhs) <=> bool(rhs);
    }
}

template <class T>
constexpr bool operator==(const optional<T>& opt, std::nullopt_t) noexcept
{
    return !opt;
}

// template< class T >
// constexpr std::strong_ordering
// operator<=>(const optional<T>& opt, std::nullopt_t) noexcept;

template <class T, class U>
constexpr bool operator==(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt == value : false;
}

template <class T, class U>
constexpr bool operator==(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value == *opt : false;
}

template <class T, class U>
constexpr bool operator!=(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt != value : true;
}

template <class T, class U>
constexpr bool operator!=(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value != *opt : true;
}

template <class T, class U>
constexpr bool operator<(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt < value : true;
}

template <class T, class U>
constexpr bool operator<(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value < *opt : false;
}

template <class T, class U>
constexpr bool operator<=(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt <= value : true;
}

template <class T, class U>
constexpr bool operator<=(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value <= *opt : false;
}

template <class T, class U>
constexpr bool operator>(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt > value : false;
}

template <class T, class U>
constexpr bool operator>(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value > *opt : true;
}

template <class T, class U>
constexpr bool operator>=(const optional<T>& opt, const U& value)
{
    return bool(opt) ? *opt >= value : false;
}

template <class T, class U>
constexpr bool operator>=(const T& value, const optional<U>& opt)
{
    return bool(opt) ? value >= *opt : true;
}

// template< class T, std::three_way_comparable_with<T> U >
// constexpr std::compare_three_way_result_t<T, U>
// operator<=>(const optional<T>& opt, const U& value);

template <class T>
constexpr optional<decay_t<T>> make_optional(T&& value)
{
    return optional<decay_t<T>>(forward<T>(value));
}

template <class T, class... Args>
constexpr optional<T> make_optional(Args&&... args)
{
    return optional<T>(in_place, forward<Args>(args)...);
}

// template <class T, class U, class... Args>
// constexpr optional<T> make_optional(initializer_list<U> il, Args&&... args)
//{
//	return optional<T>(in_place, il, forward<Args>(args)...);
//}

template <class T, typename = enable_if_t<is_move_constructible_v<T> && is_swappable_v<T>>>
constexpr void swap(optional<T>& lhs, optional<T>& rhs) noexcept(std::is_nothrow_move_constructible_v<T> &&
                                                                 std::is_nothrow_swappable_v<T>)
{
    lhs.swap(rhs);
}

template <class T>
struct hash<optional<T>>;

// Deduction guide
template <class T>
optional(T) -> optional<T>;

}
