#pragma once

//#include <array>
#include <cstring>
#include <limits>
#include <type_traits>

namespace std {
/// Declaration
// bit_cast
template<class To, class From>
constexpr To bit_cast(const From& from) noexcept;

// byteswap
template <class T>
constexpr T byteswap(T value) noexcept;

// integral powers of 2
template<class T, typename std::enable_if_t<
	std::is_integral_v<T>&& std::is_signed_v<T> &&
	!std::is_same_v<T, bool> && !std::is_same_v<T, char> &&
	!std::is_same_v<T, char8_t> && !std::is_same_v<T, char16_t> &&
	!std::is_same_v<T, char32_t> && !std::is_same_v<T, wchar_t>, bool> = true>
constexpr bool has_single_bit(T x) noexcept;

template<class T, typename std::enable_if_t<
	std::is_integral_v<T>&& std::is_signed_v<T> &&
	!std::is_same_v<T, bool> && !std::is_same_v<T, char> &&
	!std::is_same_v<T, char8_t> && !std::is_same_v<T, char16_t> &&
	!std::is_same_v<T, char32_t> && !std::is_same_v<T, wchar_t>, bool> = true>
constexpr T bit_ceil(T x);

template<class T, typename std::enable_if_t<
	std::is_integral_v<T>&& std::is_signed_v<T> &&
	!std::is_same_v<T, bool> && !std::is_same_v<T, char> &&
	!std::is_same_v<T, char8_t> && !std::is_same_v<T, char16_t> &&
	!std::is_same_v<T, char32_t> && !std::is_same_v<T, wchar_t>, bool> = true>

constexpr T bit_floor(T x) noexcept;
template<class T>
constexpr int bit_width(T x) noexcept;

// rotating
template<class T>
[[nodiscard]] constexpr T rotl(T x, int s) noexcept;
template<class T>
[[nodiscard]] constexpr T rotr(T x, int s) noexcept;

// counting
template<class T>
constexpr int countl_zero(T x) noexcept;
template<class T>
constexpr int countl_one(T x) noexcept;
template<class T>
constexpr int countr_zero(T x) noexcept;
template<class T>
constexpr int countr_one(T x) noexcept;
template<class T>
constexpr int popcount(T x) noexcept;


/// Implementation
// bit_cast
template<class To, class From, std::enable_if<
	sizeof(To) == sizeof(From) &&
	std::is_trivially_copyable_v<From>&&
	std::is_trivially_copyable_v<To>,
	bool> = true>
To bit_cast(const From & src) noexcept
{
	static_assert(std::is_trivially_constructible_v<To>,
				  "This implementation additionally requires "
				  "destination type to be trivially constructible");

	To dst;
	std::memcpy(&dst, &src, sizeof(To));
	return dst;
}

// byteswap
//template<std::integral T>
//constexpr T byteswap(T value) noexcept
//{
//    static_assert(std::has_unique_object_representations_v<T>,
//                  "T may not have padding bits");
//    auto value_representation = std::bit_cast<std::array<std::byte, sizeof(T)>>(value);
//    std::ranges::reverse(value_representation);
//    return std::bit_cast<T>(value_representation);
//}

// integral powers of 2
template<class T>
constexpr bool has_single_bit(T x) noexcept
{
	return x && !(x & (x - 1));
}

template<class T>
constexpr T bit_ceil(T x) noexcept
{
	if (x <= 1u)
		return T(1);
	if constexpr (std::is_same_v<T, decltype(+x)>)
		return T(1) << std::bit_width(T(x - 1));
	else {   // for types subject to integral promotion
		constexpr int offset_for_ub =
			std::numeric_limits<unsigned>::digits - std::numeric_limits<T>::digits;
		return T(1u << (std::bit_width(T(x - 1)) + offset_for_ub) >> offset_for_ub);
	}
}

template<class T>
constexpr T bit_floor(T x) noexcept
{
	if (x != 0)
		return T{ 1 } << (std::bit_width(x) - 1);
	return 0;
}

template<class T>
constexpr int bit_width(T x) noexcept
{
	return std::numeric_limits<T>::digits - std::countl_zero(x);
}

// rotating
template<class T>
[[nodiscard]] constexpr T rotl(T x, int s) noexcept
{
	auto N = std::numeric_limits<T>::digits;
	auto r = s % N;

	if (r == 0) {
		return x;
	} else if (r > 0) {
		(x >> r) | (x << (N - r));
	} else {
		std::rotr(x, -r);
	}
}

template<class T>
[[nodiscard]] constexpr T rotr(T x, int s) noexcept
{
	auto N = std::numeric_limits<T>::digits;
	auto r = s % N;

	if (r == 0) {
		return x;
	} else if (r > 0) {
		(x << r) | (x >> (N - r));
	} else {
		std::rotl(x, -r);
	}
}

// counting
template<>
constexpr int countl_zero<unsigned int>(unsigned int x) noexcept
{
	return __builtin_clz(x);
}

template<>
constexpr int countl_zero<unsigned long>(unsigned long x) noexcept
{
	return __builtin_clzl(x);
}

template<>
constexpr int countl_zero<unsigned long long>(unsigned long long x) noexcept
{
	return __builtin_clzll(x);
}

template<class T>
constexpr int countl_one(T x) noexcept
{
	return countl_zero<T>(~x);
}

template<>
constexpr int countr_zero<unsigned int>(unsigned int x) noexcept
{
	return __builtin_ctz(x);
}

template<>
constexpr int countr_zero<unsigned long>(unsigned long x) noexcept
{
	return __builtin_ctzl(x);
}

template<>
constexpr int countr_zero<unsigned long long>(unsigned long long x) noexcept
{
	return __builtin_ctzll(x);
}

template<class T>
constexpr int countr_one(T x) noexcept
{
	return countr_zero<T>(~x);
}

template<>
constexpr int popcount<unsigned int>(unsigned int x) noexcept
{
	return __builtin_popcount(x);
}

template<>
constexpr int popcount<unsigned long>(unsigned long x) noexcept
{
	return __builtin_popcountl(x);
}

template<>
constexpr int popcount<unsigned long long>(unsigned long long x) noexcept
{
	return __builtin_popcountll(x);
}

// endian
enum class endian
{
	little = __ORDER_LITTLE_ENDIAN__,
	big = __ORDER_BIG_ENDIAN__,
	native = __BYTE_ORDER__
};
}
