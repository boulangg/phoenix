/*
 * Copyright (c) 2016 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#ifndef PHOENIX_VECTOR_H
#define PHOENIX_VECTOR_H

#define DEFAULT_CAPACITY 4

#include <cstddef>
#include <iterator>

#include <extension/generic_iterator.hpp>

namespace std {

template <class T>
class vector {
public:
	typedef T value_type;
	typedef value_type& reference;
	typedef const reference const_reference;
	typedef value_type* pointer;
	typedef size_t size_type;

	typedef generic_iterator<pointer> iterator;

	vector();
	vector (size_type n, const_reference val);
	vector(const vector& v);
	vector(vector&& v);

	~vector();

	iterator begin() const {return iterator(_data);}
	iterator end() const {return iterator(_data+_size);}

	reference operator[](int pos) const;

    vector<T>& operator=(const vector<T>& v);
    vector<T>& operator=(vector<T>&& v);

	reference front() const ;
	reference back();

	void push_back(const_reference val);
	void push_back(value_type&& val);
	void pop_back();

	size_type size() const;
	bool empty() const;

	void clear();

private:
	void resize();

	size_type _capacity;
	size_type _size;
	pointer _data;
};

}

#include "internal/vector.tpp"

#endif //PHOENIX_VECTOR_H
