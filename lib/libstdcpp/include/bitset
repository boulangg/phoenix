#pragma once

#include <cstddef>

namespace std {

template <size_t N>
class bitset {
public:
	class reference {
		friend class bitset;
		reference();                                // no public constructor
		reference(bitset& b, size_t pos);
	public:
		~reference();
		operator bool() const;                      // convert to bool
		reference& operator=(bool x);              // assign bool
		reference& operator=(const reference& x);  // assign bit
		reference& flip();                          // flip bit value
		bool operator~() const;                     // return inverse value

	private:
		bitset<N>& ref;
		size_t pos;
	};

	bitset();
	bitset(unsigned long val);

	bitset& operator&=(const bitset& rhs);
	bitset& operator|=(const bitset& rhs);
	bitset& operator^=(const bitset& rhs);
	bitset& operator<<=(size_t pos);
	bitset& operator>>=(size_t pos);
	bitset operator~() const;
	bitset operator<<(size_t pos) const;
	bitset operator>>(size_t pos) const;
	bool operator==(const bitset& rhs) const;
	bool operator!=(const bitset& rhs) const;

	bool operator[](size_t pos) const;
	reference operator[](size_t pos);

	size_t count() const;
	size_t size() const;
	bool test (size_t pos) const;
	bool any() const;
	bool none() const;
	bool all() const noexcept;

	bitset& set();
	bitset& set(size_t pos, bool val = true);
	bitset& reset();
	bitset& reset(size_t pos);
	bitset& flip();
	bitset& flip(size_t pos);

private:
	typedef unsigned long vector_t;

	vector_t* vector;
	size_t capacity;
};

template<size_t N>
bitset<N> operator&(const bitset<N>& lhs, const bitset<N>& rhs);
template<size_t N>
bitset<N> operator|(const bitset<N>& lhs, const bitset<N>& rhs);
template<size_t N>
bitset<N> operator^(const bitset<N>& lhs, const bitset<N>& rhs);

}

/** Implementation **/
#include "internal/bitset.tpp"

