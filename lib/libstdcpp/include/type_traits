#pragma once

#include <cstddef>

namespace std {

//// Declaration
// 20.15.3, helper class
template <class T, T v>
struct integral_constant
{
	static constexpr T value = v;
	using value_type = T;
	using type = integral_constant<T, v>;
	constexpr operator value_type() const noexcept
	{
		return value;
	}
	constexpr value_type operator()() const noexcept
	{
		return value;
	}
};

template <bool B>
using bool_constant = integral_constant<bool, B>;

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

// 20.15.7.6, other transformations (Part 1)
template <class T>
struct type_identity {
	using type = T;
};
template <class T>
using type_identity_t = typename type_identity<T>::type;

// 20.15.6, type relations
template <class T, class U>
struct is_same : std::false_type {};
template <class T>
struct is_same<T, T> : std::true_type {};
template <class T, class U>
inline constexpr bool is_same_v = is_same<T, U>::value;

template <class Base, class Derived>
struct is_base_of : std::bool_constant<__is_base_of(Base, Derived)> {};
template <class Base, class Derived>
inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

// 20.15.7.2, reference modifications
template <class T> struct remove_reference : type_identity<T> {};
template <class T> struct remove_reference<T&> : type_identity<T> {};
template <class T> struct remove_reference<T&&> : type_identity<T> {};
template <class T>
using remove_reference_t = typename remove_reference<T>::type;

namespace detail {

template <class T> // Note that `cv void&` is a substitution failure
auto try_add_lvalue_reference(int)->type_identity<T&>;
template <class T> // Handle T = cv void case
auto try_add_lvalue_reference(...)->type_identity<T>;

template <class T>
auto try_add_rvalue_reference(int)->type_identity<T&&>;
template <class T>
auto try_add_rvalue_reference(...)->type_identity<T>;

} // namespace detail

template <class T>
struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {};
template <class T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

template <class T>
struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {};
template <class T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

// 20.15.7.1, const-volatile modifications
template <class T> struct remove_cv : type_identity<T> {};
template <class T> struct remove_cv<const T> : type_identity<T> {};
template <class T> struct remove_cv<volatile T> : type_identity<T> {};
template <class T> struct remove_cv<const volatile T> : type_identity<T> {};
template <class T>
using remove_cv_t = typename remove_cv<T>::type;

template < class T > struct remove_const : type_identity<T> {};
template < class T > struct remove_const<const T> : type_identity<T> {};
template <class T>
using remove_const_t = typename remove_const<T>::type;

template <class T> struct remove_volatile : type_identity<T> {};
template <class T> struct remove_volatile<volatile T> : type_identity<T> {};
template <class T>
using remove_volatile_t = typename remove_volatile<T>::type;

template <class T> struct add_const : type_identity<const T> {};
template <class T>

using add_const_t = typename add_const<T>::type;
template <class T> struct add_volatile : type_identity<volatile T> {};
template <class T>

using add_volatile_t = typename add_volatile<T>::type;
template <class T> struct add_cv : type_identity<const volatile T> {};
template <class T>
using add_cv_t = typename add_cv<T>::type;

// 20.15.4.3, type properties (Part 1)
template <class T> struct is_const : std::false_type {};
template <class T> struct is_const<const T> : std::true_type {};
template <class T>
inline constexpr bool is_const_v = is_const<T>::value;

// 20.15.4.2, composite type categories (Part 1)
template <class T> struct is_reference : std::false_type {};
template <class T> struct is_reference<T&> : std::true_type {};
template <class T> struct is_reference<T&&> : std::true_type {};
template <class T>
inline constexpr bool is_reference_v = is_reference<T>::value;

template < class T >
struct is_member_pointer_helper : std::false_type {};
template < class T, class U >
struct is_member_pointer_helper<T U::*> : std::true_type {};
template < class T >
struct is_member_pointer : is_member_pointer_helper<std::remove_cv_t<T>> {};
template <class T>
inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

// 20.15.4.1, primary type categories
template < class T >
struct is_void : std::is_same<void, std::remove_cv_t<T>> {};
template <class T>
inline constexpr bool is_void_v = is_void<T>::value;

template < class T >
struct is_null_pointer : std::is_same<std::nullptr_t, std::remove_cv_t<T>> {};
template <class T>
inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

template <class T>
struct is_integral : false_type {};
template <> struct is_integral<bool> : true_type {};
template <> struct is_integral<char> : true_type {};
template <> struct is_integral<signed char> : true_type {};
template <> struct is_integral<unsigned char> : true_type {};
template <> struct is_integral<wchar_t> : true_type {};
template <> struct is_integral<char16_t> : true_type {};
template <> struct is_integral<char32_t> : true_type {};
template <> struct is_integral<short> : true_type {};
template <> struct is_integral<unsigned short> : true_type {};
template <> struct is_integral<int> : true_type {};
template <> struct is_integral<unsigned int> : true_type {};
template <> struct is_integral<long> : true_type {};
template <> struct is_integral<unsigned long> : true_type {};
template <> struct is_integral<long long> : true_type {};
template <> struct is_integral<unsigned long long> : true_type {};
template <class T>
inline constexpr bool is_integral_v = is_integral<T>::value;

template <class T>
struct is_floating_point : false_type {};
template <> struct is_floating_point<float> : true_type {};
template <> struct is_floating_point<double> : true_type {};
template <> struct is_floating_point<long double> : true_type {};
template <class T>
inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

template <class T>
struct is_array : std::false_type {};
template <class T>
struct is_array<T[]> : std::true_type {};
template <class T, std::size_t N>
struct is_array<T[N]> : std::true_type {};
template <class T>
inline constexpr bool is_array_v = is_array<T>::value;

template <class T> struct is_pointer : std::false_type {};
template <class T> struct is_pointer<T*> : std::true_type {};
template <class T> struct is_pointer<T* const> : std::true_type {};
template <class T> struct is_pointer<T* volatile> : std::true_type {};
template <class T> struct is_pointer<T* const volatile> : std::true_type {};
template <class T>
inline constexpr bool is_pointer_v = is_pointer<T>::value;

template <class T> struct is_lvalue_reference : std::false_type {};
template <class T> struct is_lvalue_reference<T&> : std::true_type {};
template <class T>
inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

template <class T> struct is_rvalue_reference : std::false_type {};
template <class T> struct is_rvalue_reference<T&&> : std::true_type {};
template <class T>
inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

template <class T> struct is_enum : std::bool_constant<__is_enum(T)> {};
template <class T>
inline constexpr bool is_enum_v = is_enum<T>::value;

template <class T> struct is_union : std::bool_constant<__is_union(T)> {};
template <class T>
inline constexpr bool is_union_v = is_union<T>::value;

template <class T> struct is_class : std::bool_constant<__is_class(T)> {};
template <class T>
inline constexpr bool is_class_v = is_class<T>::value;

template <class T>
struct is_function : std::bool_constant<!std::is_const_v<const T> && !std::is_reference_v<T>> {};
template <class T>
inline constexpr bool is_function_v = is_function<T>::value;

template <class T>
struct is_member_function_pointer_helper : std::false_type {};
template <class T, class U>
struct is_member_function_pointer_helper<T U::*> : std::is_function<T> {};
template <class T>
struct is_member_function_pointer : is_member_function_pointer_helper<std::remove_cv_t<T>> {};
template <class T>
inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

template <class T>
struct is_member_object_pointer : std::bool_constant<std::is_member_pointer_v<T> && !std::is_member_function_pointer_v<T>> {};
template <class T>
inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

// 20.15.4.2, composite type categories (Part 2)
template < class T >
struct is_arithmetic : std::bool_constant<std::is_integral_v<T> || std::is_floating_point_v<T>> {};
template <class T>
inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

template < class T >
struct is_fundamental : std::bool_constant<std::is_arithmetic_v<T> || std::is_void_v<T> || std::is_null_pointer_v<T>> {};
template <class T>
inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

template <class T>
struct is_scalar : std::bool_constant<std::is_arithmetic_v<T> || std::is_enum_v<T> || std::is_pointer_v<T> || std::is_member_pointer_v<T> || std::is_null_pointer_v<T>> {};
template <class T>
inline constexpr bool is_scalar_v = is_scalar<T>::value;

template < class T>
struct is_object : std::bool_constant<std::is_scalar_v<T> || std::is_array_v<T> || std::is_union_v<T> || std::is_class_v<T>> {};
template <class T>
inline constexpr bool is_object_v = is_object<T>::value;

template < class T >
struct is_compound : std::bool_constant<!std::is_fundamental_v<T>> {};
template <class T>
inline constexpr bool is_compound_v = is_compound<T>::value;

// 20.15.4.3, type properties (Part 2)
template <class T> struct is_volatile : std::false_type {};
template <class T> struct is_volatile<volatile T> : std::true_type {};
template <class T>
inline constexpr bool is_volatile_v = is_volatile<T>::value;

template <class T>
struct is_trivial : std::bool_constant<__is_trivial(T)> {};
template <class T>
inline constexpr bool is_trivial_v = is_trivial<T>::value;

template <class T>
struct is_trivially_copyable : std::bool_constant<__has_trivial_copy(T)> {};
template <class T>
inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

template <class T>
struct is_standard_layout : std::bool_constant<__is_standard_layout(T)> {};
template <class T>
inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

template <class T>
struct is_empty : std::bool_constant<__is_empty(T)> {};
template <class T>
inline constexpr bool is_empty_v = is_empty<T>::value;

template <class T>
struct is_polymorphic : std::bool_constant<__is_polymorphic(T)> {};
template <class T>
inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

template <class T>
struct is_abstract : std::bool_constant<__is_abstract(T)> {};
template <class T>
inline constexpr bool is_abstract_v = is_abstract<T>::value;

template <class T>
struct is_final : std::bool_constant<__is_final(T)> {};
template <class T>
inline constexpr bool is_final_v = is_final<T>::value;

template <class T> struct is_aggregate;
template <class T>
struct is_aggregate : std::bool_constant<__is_aggregate(T)> {};
template <class T>
inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

namespace detail {
template <typename T, bool = std::is_arithmetic_v<T>>
struct is_signed : std::integral_constant<bool, T(-1) < T(0) > {};

template <typename T>
struct is_signed<T, false> : std::false_type {};
} // namespace detail

template <typename T>
struct is_signed : detail::is_signed<T>::type {};
template <class T>
inline constexpr bool is_signed_v = is_signed<T>::value;

namespace detail {
template <typename T, bool = std::is_arithmetic<T>::value>
struct is_unsigned : std::integral_constant<bool, T(0) < T(-1) > {};

template <typename T>
struct is_unsigned<T, false> : std::false_type {};
} // namespace detail

template <typename T>
struct is_unsigned : detail::is_unsigned<T>::type {};
template <class T>
inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

template <class T>
struct is_bounded_array : std::false_type {};
template <class T, std::size_t N>
struct is_bounded_array<T[N]> : std::true_type {};
template <class T>
inline constexpr bool is_bounded_array_v = is_bounded_array<T>::value;

template <class T> struct is_unbounded_array : std::false_type {};
template <class T> struct is_unbounded_array<T[]> : std::true_type {};
template <class T>
inline constexpr bool is_unbounded_array_v = is_unbounded_array<T>::value;

//template <class T, class... Args>
//struct is_constructible;
//template <class T, class... Args>
//inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

//template <class T> struct is_default_constructible;
//template <class T>
//inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;

//template <class T> struct is_copy_constructible;
//template <class T>
//inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;

//template <class T> struct is_move_constructible;
//template <class T>
//inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

//template <class T, class U>
//struct is_assignable;
//template <class T, class U>
//inline constexpr bool is_assignable_v = is_assignable<T, U>::value;

//template <class T> struct is_copy_assignable;
//template <class T>
//inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;

//template <class T> struct is_move_assignable;
//template <class T>
//inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;

//template <class T, class U>
//struct is_swappable_with;
//template <class T, class U>
//inline constexpr bool is_swappable_with_v = is_swappable_with<T, U>::value;

//template <class T> struct is_swappable;
//template <class T>
//inline constexpr bool is_swappable_v = is_swappable<T>::value;

//template <class T> struct is_destructible;
//template <class T>
//inline constexpr bool is_destructible_v = is_destructible<T>::value;

//template <class T, class... Args> struct is_trivially_constructible;
//template <class T, class... Args>
//inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;

template <class T>
struct is_trivially_default_constructible : std::bool_constant<__has_trivial_constructor(T)> {};
template <class T>
inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;

template <class T>
struct is_trivially_copy_constructible : std::bool_constant<__has_trivial_copy(T)> {};
template <class T>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;

//template <class T> struct is_trivially_move_constructible;
//template <class T>
//inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;

//template <class T, class U>
//struct is_trivially_assignable;
//template <class T, class U>
//inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;

//template <class T> struct is_trivially_copy_assignable;
//template <class T>
//inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;

//template <class T> struct is_trivially_move_assignable;
//template <class T>
//inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;

template <class T>
struct is_trivially_destructible : std::bool_constant<__has_trivial_destructor(T)> {};
template <class T>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;

//template <class T, class... Args> struct is_nothrow_constructible;
//template <class T, class... Args>
//inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;

template <class T>
struct is_nothrow_default_constructible : std::bool_constant<__has_nothrow_constructor(T)> {};
template <class T>
inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;

template <class T>
struct is_nothrow_copy_constructible : std::bool_constant<__has_nothrow_copy(T)> {};
template <class T>
inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<T>::value;

//template <class T> struct is_nothrow_move_constructible; 
//template <class T>
//inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<T>::value;

//template <class T, class U> struct is_nothrow_assignable;
//template <class T, class U>
//inline constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<T, U>::value;

//template <class T> struct is_nothrow_copy_assignable;
//template <class T>
//inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;

//template <class T> struct is_nothrow_move_assignable;
//template <class T>
//inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;

//template <class T, class U> struct is_nothrow_swappable_with;
//template <class T, class U>
//inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<T, U>::value;

//template <class T> struct is_nothrow_swappable;
//template <class T>
//inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<T>::value;

//template <class T> struct is_nothrow_destructible;
//template <class T>
//inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<T>::value;

template <class T>
struct has_virtual_destructor : std::bool_constant<__has_virtual_destructor(T)> {};
template <class T>
inline constexpr bool has_virtual_destructor_v = has_virtual_destructor<T>::value;

//template <class T> struct has_unique_object_representations;
//template <class T>
//inline constexpr bool has_unique_object_representations_v = has_unique_object_representations<T>::value;

// 20.15.5, type property queries
template <class T>
struct alignment_of : std::integral_constant<std::size_t, alignof(T)> {};
template <class T>
inline constexpr size_t alignment_of_v = alignment_of<T>::value;

template <class T>
struct rank : public std::integral_constant<std::size_t, 0> {};
template <class T>
struct rank<T[]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};
template <class T, std::size_t N>
struct rank<T[N]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};
template <class T>
inline constexpr size_t rank_v = rank<T>::value;

template <class T, unsigned N = 0>
struct extent : std::integral_constant<std::size_t, 0> {};
template <class T>
struct extent<T[], 0> : std::integral_constant<std::size_t, 0> {};
template <class T, unsigned N>
struct extent<T[], N> : std::extent<T, N - 1> {};
template <class T, std::size_t I>
struct extent<T[I], 0> : std::integral_constant<std::size_t, I> {};
template <class T, std::size_t I, unsigned N>
struct extent<T[I], N> : std::extent<T, N - 1> {};
template <class T, unsigned I = 0>
inline constexpr size_t extent_v = extent<T, I>::value;

// Helpers declval
template <typename T> constexpr bool always_false = false;

template <typename T>
typename std::add_rvalue_reference<T>::type declval() noexcept
{
	static_assert(always_false<T>, "declval not allowed in an evaluated context");
}

namespace detail {
template <class T>
auto test_returnable(int) -> decltype(
	void(static_cast<T(*)()>(nullptr)), std::true_type{}
);
template <class>
auto test_returnable(...)->std::false_type;

template <class From, class To>
auto test_implicitly_convertible(int) -> decltype(
	void(std::declval<void(&)(To)>()(std::declval<From>())), std::true_type{}
);
template <class, class>
auto test_implicitly_convertible(...)->std::false_type;
} // namespace detail

template <class From, class To>
struct is_convertible : std::bool_constant<
	(decltype(detail::test_returnable<To>(0))::value&&
	 decltype(detail::test_implicitly_convertible<From, To>(0))::value) ||
	(std::is_void<From>::value && std::is_void<To>::value)
> {};
template <class From, class To>
inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

//template <class From, class To> struct is_nothrow_convertible;
//template <class From, class To>
//inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<From, To>::value;

//template <class T, class U> struct is_layout_compatible;
//template <class T, class U>
//inline constexpr bool is_layout_compatible_v = is_layout_compatible<T, U>::value;

//template <class Base, class Derived> struct is_pointer_interconvertible_base_of;
//template <class Base, class Derived>
//inline constexpr bool is_pointer_interconvertible_base_of_v = is_pointer_interconvertible_base_of<Base, Derived>::value;

//template <class Fn, class... ArgTypes> struct is_invocable;
//template <class Fn, class... ArgTypes>
//inline constexpr bool is_invocable_v = is_invocable<Fn, ArgTypes...>::value;

//template <class R, class Fn, class... ArgTypes> struct is_invocable_r;
//template <class R, class Fn, class... ArgTypes>
//inline constexpr bool is_invocable_r_v = is_invocable_r<R, Fn, ArgTypes...>::value;

//template <class Fn, class... ArgTypes> struct is_nothrow_invocable;
//template <class Fn, class... ArgTypes>
//inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<Fn, ArgTypes...>::value;

//template <class R, class Fn, class... ArgTypes> struct is_nothrow_invocable_r;
//template <class R, class Fn, class... ArgTypes>
//inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;

// 20.15.7.3, sign modifications
//template <class T> struct make_signed;
//template <class T>
//using make_signed_t = typename make_signed<T>::type;

//template <class T> struct make_unsigned;
//template <class T>
//using make_unsigned_t = typename make_unsigned<T>::type;



// 20.15.7.4, array modifications
template <class T>
struct remove_extent : type_identity<T> {};
template <class T>
struct remove_extent<T[]> : type_identity<T> {};
template <class T, std::size_t N>
struct remove_extent<T[N]> : type_identity<T> {};
template <class T>
using remove_extent_t = typename remove_extent<T>::type;

template <class T>
struct remove_all_extents : type_identity<T> {};
template <class T>
struct remove_all_extents<T[]> : type_identity<T> {};
template <class T, std::size_t N>
struct remove_all_extents<T[N]> : type_identity<T> {};
template <class T>
using remove_all_extents_t = typename remove_all_extents<T>::type;

// 20.15.7.5, pointer modifications

template <class T> struct remove_pointer : type_identity<T> {};
template <class T> struct remove_pointer<T*> : type_identity<T> {};
template <class T> struct remove_pointer<T* const> : type_identity<T> {};
template <class T> struct remove_pointer<T* volatile> : type_identity<T> {};
template <class T> struct remove_pointer<T* const volatile> : type_identity<T> {};
template <class T>
using remove_pointer_t = typename remove_pointer<T>::type;

namespace detail {
template <class T>
auto try_add_pointer(int)->type_identity<typename std::remove_reference<T>::type*>;
template <class T>
auto try_add_pointer(...)->type_identity<T>;
} // namespace detail

template <class T>
struct add_pointer : decltype(detail::try_add_pointer<T>(0)) {};
template <class T>
using add_pointer_t = typename add_pointer<T>::type;

// 20.15.7.6, other transformations (Part 2)

template < class T >
struct remove_cvref {
	typedef std::remove_cv_t<std::remove_reference_t<T>> type;
};
template <class T>
using remove_cvref_t = typename remove_cvref<T>::type;

template <bool B, class T, class F>
struct conditional : type_identity<T> {};
template <class T, class F>
struct conditional<false, T, F> : type_identity<F> {};
template <bool b, class T, class F>
using conditional_t = typename conditional<b, T, F>::type;

template < class T >
struct decay {
private:
	typedef std::remove_reference_t<T> U;
public:
	typedef std::conditional_t<
		std::is_array_v<U>,
		typename std::remove_extent_t<U>*,
		typename std::conditional_t<std::is_function_v<U>, typename std::add_pointer_t<U>, typename std::remove_cv_t<U>>
	> type;
};
template <class T>
using decay_t = typename decay<T>::type;

template <bool B, class T = void>
struct enable_if {};
template <class T>
struct enable_if<true, T> {
	typedef T type;
};
template <bool b, class T = void>
using enable_if_t = typename enable_if<b, T>::type;

template <class... T>
struct common_type;
template <class T> struct common_type<T> : common_type<T, T> {};
template <class T, class U>
struct common_type<T, U>
{
	typedef decay_t<decltype(true ? declval<T>() : declval<U>())> type;
};
template <class T, class U, class... V>
struct common_type<T, U, V...>
{
	typedef typename common_type<typename common_type<T, U>::type, V...>::type type;
};
template <class... T>
using common_type_t = typename common_type<T...>::type;

//template <class T, class U, template <class> class TQual, template <class> class UQual>
//struct basic_common_reference
//{};

//template <class... T> struct common_reference;
//template <class... T>
//using common_reference_t = typename common_reference<T...>::type;

//template <class T> struct underlying_type;
//template <class T>
//using underlying_type_t = typename underlying_type<T>::type;

//template <class Fn, class... ArgTypes> struct invoke_result;
//template <class Fn, class... ArgTypes>
//using invoke_result_t = typename invoke_result<Fn, ArgTypes...>::type;

//template <class T> struct unwrap_reference;
//template <class T>
//using unwrap_reference_t = typename unwrap_reference<T>::type;

//template <class T> struct unwrap_ref_decay;
//template <class T>
//using unwrap_ref_decay_t = typename unwrap_ref_decay<T>::type;

template <class...>
using void_t = void;

// 20.15.8, logical operator traits
template <class...>
struct conjunction : std::true_type { };
template <class B1>
struct conjunction<B1> : B1 { };
template <class B1, class... Bn>
struct conjunction<B1, Bn...> : std::conditional_t<bool(B1::value), conjunction<Bn...>, B1> {};
template <class... B>
inline constexpr bool conjunction_v = conjunction<B...>::value;

template <class...>
struct disjunction : std::false_type { };
template <class B1>
struct disjunction<B1> : B1 { };
template <class B1, class... Bn>
struct disjunction<B1, Bn...> : std::conditional_t<bool(B1::value), B1, disjunction<Bn...>> { };
template <class... B>
inline constexpr bool disjunction_v = disjunction<B...>::value;

template <class B>
struct negation : std::bool_constant<!bool(B::value)> { };
template <class B>
inline constexpr bool negation_v = negation<B>::value;

// 20.15.9, member relationships
//template <class S, class M>
//constexpr bool is_pointer_interconvertible_with_class(M S::* m) noexcept;

//template <class S1, class S2, class M1, class M2>
//constexpr bool is_corresponding_member(M1 S1::* m1, M2 S2::* m2) noexcept;

// 20.15.10, constant evaluation context
//constexpr bool is_constant_evaluated() noexcept;

}
