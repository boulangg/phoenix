#pragma once

#include <type_traits>

namespace std {

template < class T >
concept integral = is_integral_v<T>;

template < class T >
concept signed_integral = integral<T> && is_signed_v<T>;

template < class T >
concept unsigned_integral = integral<T> && !signed_integral<T>;

namespace detail {
template< class T, class U >
concept SameHelper = is_same_v<T, U>;
}

template< class T, class U >
concept same_as = detail::SameHelper<T, U> && detail::SameHelper<U, T>;

}
