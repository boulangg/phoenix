/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <exception>
#include <string>

namespace std {
class logic_error : public exception
{
public:
    explicit logic_error(const string& what_arg);
    explicit logic_error(const char* what_arg);

    const char* what() const noexcept override;

private:
    std::string _msg;
};

class domain_error : public logic_error
{
public:
    explicit domain_error(const string& what_arg);
    explicit domain_error(const char* what_arg);
};

class invalid_argument : public logic_error
{
public:
    explicit invalid_argument(const string& what_arg);
    explicit invalid_argument(const char* what_arg);
};

class length_error : public logic_error
{
public:
    explicit length_error(const string& what_arg);
    explicit length_error(const char* what_arg);
};

class out_of_range : public logic_error
{
public:
    explicit out_of_range(const string& what_arg);
    explicit out_of_range(const char* what_arg);
};

class runtime_error : public exception
{
public:
    explicit runtime_error(const string& what_arg);
    explicit runtime_error(const char* what_arg);

    const char* what() const noexcept override;

private:
    std::string _msg;
};

class range_error : public runtime_error
{
public:
    explicit range_error(const string& what_arg);
    explicit range_error(const char* what_arg);
};

class overflow_error : public runtime_error
{
public:
    explicit overflow_error(const string& what_arg);
    explicit overflow_error(const char* what_arg);
};

class underflow_error : public runtime_error
{
public:
    explicit underflow_error(const string& what_arg);
    explicit underflow_error(const char* what_arg);
};
}
