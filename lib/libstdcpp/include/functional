/*
 * Copyright (c) 2016-2021 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

namespace std {

template< class T >
class less {
public:
	bool operator()( const T& lhs, const T& rhs ) const {
		return lhs < rhs;
	}
};

template< class T >
class greater {
public:
	bool operator()( const T& lhs, const T& rhs ) const {
		return lhs > rhs;
	}
};

template<class Key>
struct hash;

template <class T>
struct equal_to {
	typedef T first_argument_type;
	typedef T second_argument_type;
	typedef bool result_type;
	bool operator()(const T& x, const T& y) const {
		return x==y;
	}
};

}

#include "internal/hash.tpp"
