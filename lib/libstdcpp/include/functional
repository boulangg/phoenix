/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <details/function.h>
#include <details/hash.h>

namespace std {

template <class T>
class less
{
public:
    bool operator()(const T& lhs, const T& rhs) const
    {
        return lhs < rhs;
    }
};

template <class T>
class greater
{
public:
    bool operator()(const T& lhs, const T& rhs) const
    {
        return lhs > rhs;
    }
};

template <class T>
struct equal_to
{
    typedef T first_argument_type;
    typedef T second_argument_type;
    typedef bool result_type;
    bool operator()(const T& x, const T& y) const
    {
        return x == y;
    }
};

}
