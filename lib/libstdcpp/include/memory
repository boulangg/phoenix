/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <new>
#include <def/memory_address_of.h>

namespace std {

template <class T, class... Args>
constexpr T* construct_at(T* p, Args&&... args)
{
    return ::new (const_cast<void*>(static_cast<const volatile void*>(p))) T(std::forward<Args>(args)...);
}

template <class T>
constexpr void destroy_at(T* p)
{
    if constexpr (std::is_array_v<T>) {
        for (auto& elem : *p) {
            (destroy_at)(std::addressof(elem));
        }
    } else {
        p->~T();
    }
}

template <class T>
class unique_ptr
{
public:
    using pointer = T*;
    using element_type = T;

    constexpr unique_ptr() noexcept
    {
        _dataPtr = nullptr;
    }

    constexpr unique_ptr(std::nullptr_t) noexcept
    {
        _dataPtr = nullptr;
    }

    constexpr explicit unique_ptr(pointer p) noexcept
    {
        _dataPtr = p;
    }

    constexpr unique_ptr(unique_ptr&& u) noexcept
    {
        _dataPtr = u._dataPtr;
    }

    template <class U>
    constexpr unique_ptr(unique_ptr<U>&& u) noexcept
    {
        _dataPtr = u.get();
    }

    unique_ptr(const unique_ptr&) = delete;

    ~unique_ptr() {}

    constexpr unique_ptr& operator=(unique_ptr&& r) noexcept
    {
        reset(r.release());
        return *this;
    }

    constexpr unique_ptr& operator=(std::nullptr_t) noexcept
    {
        reset();
        return *this;
    }

    unique_ptr& operator=(const unique_ptr&) = delete;

    constexpr pointer release() noexcept
    {
        auto tmp = _dataPtr;
        _dataPtr = nullptr;
        return tmp;
    }

    constexpr void reset(pointer ptr = pointer()) noexcept
    {
        auto oldPtr = _dataPtr;
        _dataPtr = ptr;
        if (oldPtr != nullptr) {
            delete oldPtr;
        }
    }

    constexpr void reset(std::nullptr_t = nullptr) noexcept
    {
        reset(pointer());
    }

    void swap(unique_ptr& other) noexcept
    {
        std::swap(_dataPtr, other._dataPtr);
    }

    constexpr pointer get() const noexcept
    {
        return _dataPtr;
    }

    typename std::add_lvalue_reference<T>::type operator*() const noexcept(noexcept(*std::declval<pointer>()))
    {
        return *get();
    }

    constexpr pointer operator->() const noexcept
    {
        return get();
    }

    constexpr explicit operator bool() const noexcept
    {
        return get() != nullptr;
    }

private:
    pointer _dataPtr;
};

template <class T, class... Args>
constexpr unique_ptr<T> make_unique(Args&&... args)
{
    return unique_ptr<T>(new T(std::forward<Args>(args)...));
}

}
