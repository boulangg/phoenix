/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <new>
#include <type_traits>
#include <utility>

namespace std {

template <class T, typename = typename std::enable_if<!std::is_object<T>::value, T*>::type>
constexpr T* addressof(T& arg) noexcept
{
    return &arg;
}

template <class T, class... Args>
constexpr T* construct_at(T* p, Args&&... args)
{
    return ::new (const_cast<void*>(static_cast<const volatile void*>(p))) T(std::forward<Args>(args)...);
}

template <class T>
constexpr void destroy_at(T* p)
{
    if constexpr (std::is_array_v<T>) {
        for (auto& elem : *p) {
            (destroy_at)(std::addressof(elem));
        }
    } else {
        p->~T();
    }
}

}
