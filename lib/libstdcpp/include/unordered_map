/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <functional>

#include "herlpers/hashtable.h"

namespace std {

template <class Key, class T, class Hash = hash<Key>, class KeyEqual = equal_to<Key>>
class unordered_map
{
public:
    using key_type = Key;
    using mapped_type = T;
    using value_type = pair<const key_type, T>;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using hasher = Hash;
    using key_equal = KeyEqual;
    using reference = value_type&;
    using const_reference = const value_type&;
    using pointer = value_type*;
    using const_pointer = const value_type*;

private:
    struct extractor
    {
        const key_type& operator()(const value_type& value) const
        {
            return value.first;
        }
    };

    extractor _extractor;
    hasher _hasher;
    key_equal _key_equal;

    using hashtable_type = std::detail::hashtable<key_type, value_type, extractor, hasher, key_equal>;
    hashtable_type _hashtable;

public:
    using iterator = typename hashtable_type::iterator;

    unordered_map() : unordered_map(0) {}

    explicit unordered_map(size_type bucket_count, const hasher& hash = hasher(),
                           const key_equal& equal = key_equal()) :
        _extractor(),
        _hasher(hash), _key_equal(equal), _hashtable(bucket_count, _extractor, _hasher, _key_equal)
    {}

    unordered_map(size_type bucket_count, const Hash& hash) : unordered_map(bucket_count, hash, key_equal()) {}

    // Capacity
    bool empty() const noexcept
    {
        return size() == 0;
    }

    size_type size() noexcept
    {
        return _hashtable.size();
    }

    // Iterators
    iterator begin()
    {
        return _hashtable.begin();
    }

    iterator end()
    {
        return _hashtable.end();
    }

    // Lookup
    mapped_type& at(const key_type& key)
    {
        return _hashtable.at(key);
    }

    mapped_type& operator[](const key_type& key)
    {
        auto it = find(key);
        if (it == end()) {
            auto res = insert(value_type(key, mapped_type{}));
            it = res.first;
        }

        return *it->second;
    }

    size_type count(const key_type& key) const
    {
        return contains(key);
    }

    iterator find(const key_type& key)
    {
        return _hashtable.find(key);
    }

    bool contains(const key_type& key) const
    {
        return _hashtable.contains(key);
    }

    // Modifiers
    void clear() noexcept
    {
        _hashtable.clear();
    }

    std::pair<iterator, bool> insert(const value_type& value)
    {
        return _hashtable.insert(value);
    }

    iterator erase(iterator pos)
    {
        return _hashtable.erase(pos);
    }

    size_type erase(const key_type& key)
    {
        return _hashtable.erase(key);
    }

    // Bucket interface
    size_type bucket_count() const
    {
        return _hashtable.bucket_count();
    }

    size_type bucket_size(size_type n) const
    {
        return _hashtable.bucket_size();
    }

    size_type bucket(const Key& key) const
    {
        return _hashtable.bucket(key);
    }

    // Hash policy
    float load_factor() const
    {
        return _hashtable.load_factor();
    }

    float max_load_factor() const
    {
        return _hashtable.max_load_factor();
    }

    void max_load_factor(float ml)
    {
        _hashtable.max_load_factor(ml);
    }

    void rehash(size_type count)
    {
        _hashtable.rehash(count);
    }

    void reserve(size_type count)
    {
        _hashtable.reserve(count);
    }

    // Observers
    hasher hash_function() const
    {
        return _hasher;
    }

    key_equal key_eq() const
    {
        return _key_equal;
    }
};

}
