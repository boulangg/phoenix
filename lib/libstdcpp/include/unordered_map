/*
 * Copyright (c) 2016-2021 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <functional>
#include <utility>
#include <vector>
#include <list>

namespace std {

template <class Key, class T, class Hash = hash<Key>,
	class Pred = equal_to<Key>>
	class unordered_multimap
{
public:
	typedef Key key_type;
	typedef T mapped_type;
	typedef pair<const key_type, mapped_type> value_type;
	typedef Hash hasher;
	typedef Pred key_equal;
	typedef value_type& reference;
	typedef const value_type& const_reference;
	typedef value_type* pointer;
	typedef const value_type* const_pointer;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	bool empty() const noexcept
	{
		return _size == 0;
	}

	size_type size() noexcept
	{
		return _size;
	}

private:
	size_type _bucket_count;
	size_type _size;
	std::vector<std::list<value_type>> _hastable;
};

}
