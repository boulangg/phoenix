/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include "chrono/calendar.h"
#include "chrono/clock.h"
#include "chrono/duration.h"

namespace std {
namespace chrono {

// 27.9, class template hh_mm_ss
template <class Duration>
class hh_mm_ss;
// template <class charT, class traits, class Duration>
// basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& os, const hh_mm_ss<Duration>& hms);

// 27.10, 12/24 hour functions
constexpr bool is_am(const hours& h) noexcept;
constexpr bool is_pm(const hours& h) noexcept;
constexpr hours make12(const hours& h) noexcept;
constexpr hours make24(const hours& h, bool is_pm) noexcept;

// 27.11.2, time zone database
struct tzdb;
class tzdb_list;

// 27.11.2.3, time zone database access
const tzdb& get_tzdb();
tzdb_list& get_tzdb_list();
// const time_zone* locate_zone(string_view tz_name);
// const time_zone* current_zone();

// 27.11.2.4, remote time zone database support
const tzdb& reload_tzdb();
string remote_version();

// 27.11.3, exception classes
class nonexistent_local_time;
class ambiguous_local_time;

// 27.11.4, information classes
struct sys_info;
// template <class charT, class traits>
// basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& os, const sys_info& si);
// struct local_info;
// template <class charT, class traits>
// basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& os, const local_info& li);

// 27.11.5, class time_zone
enum class choose
{
    earliest,
    latest
};
class time_zone;
bool operator==(const time_zone& x, const time_zone& y) noexcept;
// strong_ordering operator<=>(const time_zone& x, const time_zone& y) noexcept;

// 27.11.6, class template zoned_traits
template <class T>
struct zoned_traits;

// 27.11.7, class template zoned_time
template <class Duration, class TimeZonePtr = const time_zone*>
class zoned_time;
using zoned_seconds = zoned_time<seconds>;
template <class Duration1, class Duration2, class TimeZonePtr>
bool operator==(const zoned_time<Duration1, TimeZonePtr>& x, const zoned_time<Duration2, TimeZonePtr>& y);
// template <class charT, class traits, class Duration, class TimeZonePtr>
// basic_ostream<charT, traits>& operator<<(basic_ostream<charT, traits>& os, const zoned_time<Duration, TimeZonePtr>&
// t);

// 27.11.8, leap second support
class leap_second;
bool operator==(const leap_second& x, const leap_second& y);
// strong_ordering operator<=>(const leap_second& x, const leap_second& y);
template <class Duration>
bool operator==(const leap_second& x, const sys_time<Duration>& y);
template <class Duration>
bool operator<(const leap_second& x, const sys_time<Duration>& y);
template <class Duration>
bool operator<(const sys_time<Duration>& x, const leap_second& y);
template <class Duration>
bool operator>(const leap_second& x, const sys_time<Duration>& y);
template <class Duration>
bool operator>(const sys_time<Duration>& x, const leap_second& y);
template <class Duration>
bool operator<=(const leap_second& x, const sys_time<Duration>& y);
template <class Duration>
bool operator<=(const sys_time<Duration>& x, const leap_second& y);
template <class Duration>
bool operator>=(const leap_second& x, const sys_time<Duration>& y);
template <class Duration>
bool operator>=(const sys_time<Duration>& x, const leap_second& y);
// template <class Duration>
//	requires three_way_comparable_with<sys_seconds, sys_time<Duration>>
// constexpr auto operator<=>(const leap_second& x, const sys_time<Duration>& y);

// 27.11.9, class time_zone_link
class time_zone_link;
bool operator==(const time_zone_link& x, const time_zone_link& y);
// strong_ordering operator<=>(const time_zone_link& x, const time_zone_link& y);

// 27.12, formatting
// template <class Duration> struct local - time - format - t; // exposition only
// template <class Duration>
// local - time - format - t <Duration>
// local_time_format(local_time<Duration> time, const string * abbrev = nullptr,
//				  const seconds * offset_sec = nullptr);
}

// template <class Rep, class Period, class charT>
// struct formatter<chrono::duration<Rep, Period>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::sys_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::utc_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::tai_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::gps_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::file_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::local_time<Duration>, charT>;
// template <class Duration, class charT>
// struct formatter<chrono::local - time - format - t <Duration>, charT>;
// template <class charT> struct formatter<chrono::day, charT>;
// template <class charT> struct formatter<chrono::month, charT>;
// template <class charT> struct formatter<chrono::year, charT>;
// template <class charT> struct formatter<chrono::weekday, charT>;
// template <class charT> struct formatter<chrono::weekday_indexed, charT>;
// template <class charT> struct formatter<chrono::weekday_last, charT>;
// template <class charT> struct formatter<chrono::month_day, charT>;
// template <class charT> struct formatter<chrono::month_day_last, charT>;
// template <class charT> struct formatter<chrono::month_weekday, charT>;
// template <class charT> struct formatter<chrono::month_weekday_last, charT>;
// template <class charT> struct formatter<chrono::year_month, charT>;
// template <class charT> struct formatter<chrono::year_month_day, charT>;
// template <class charT> struct formatter<chrono::year_month_day_last, charT>;
// template <class charT> struct formatter<chrono::year_month_weekday, charT>;
// template <class charT> struct formatter<chrono::year_month_weekday_last, charT>;
// template <class Rep, class Period, class charT>
// struct formatter<chrono::hh_mm_ss<duration<Rep, Period>>, charT>;
// template <class charT> struct formatter<chrono::sys_info, charT>;
// template <class charT> struct formatter<chrono::local_info, charT>;
// template <class Duration, class TimeZonePtr, class charT>
// struct formatter<chrono::zoned_time<Duration, TimeZonePtr>, charT>;

namespace chrono {

// 27.13, parsing
// template <class charT, class traits, class Alloc, class Parsable>
// unspecified
// parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp);
// template <class charT, class traits, class Alloc, class Parsable>
// unspecified
// parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,
//	  basic_string<charT, traits, Alloc>& abbrev);
// template <class charT, class traits, class Alloc, class Parsable>
// unspecified
// parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,
//	  minutes& offset);
// template <class charT, class traits, class Alloc, class Parsable>
// unspecified
// parse(const basic_string<charT, traits, Alloc>& format, Parsable& tp,
//	  basic_string<charT, traits, Alloc>& abbrev, minutes& offset);

}

namespace chrono {
using namespace literals::chrono_literals;
}
}
