/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstddef>
#include <exception>

void* operator new(std::size_t size);
void* operator new[](std::size_t size);
void* operator new(std::size_t size, void* ptr) noexcept;
void* operator new[](std::size_t size, void* ptr) noexcept;
void operator delete(void* ptr) noexcept;
void operator delete[](void* ptr) noexcept;
void operator delete(void* ptr, std::size_t) noexcept;
void operator delete[](void* ptr, std::size_t) noexcept;

namespace std {

class bad_alloc : public exception
{
public:
    const char* what() const noexcept
    {
        return "std::bad_alloc";
    }
};

class bad_array_new_length : public bad_alloc
{
public:
    const char* what() const noexcept
    {
        return "std::bad_array_new_length";
    }
};

}
