/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <climits>

#if !(__cpp_char8_t >= 202207L)
#define char8_t char
#endif

namespace std {

template <class T>
class numeric_limits
{
public:
	static constexpr T min() noexcept
	{
		return T();
	}

    static constexpr T max() noexcept
    {
        return T();
    }

	static constexpr bool is_signed = false;
	static constexpr int digits = 0;
};

template<>
class numeric_limits<bool>
{
public:
	static constexpr bool min() noexcept
	{
		return false;
	}

	static constexpr bool max() noexcept
	{
		return true;
	}

	static constexpr int digits = 1;
};

template<> class numeric_limits<char>;
template<> class numeric_limits<signed char>;
template<> class numeric_limits<unsigned char>;
template<> class numeric_limits<wchar_t>;
template<> class numeric_limits<char8_t>;
template<> class numeric_limits<char16_t>;
template<> class numeric_limits<char32_t>;
template<> class numeric_limits<short>;
template<> class numeric_limits<unsigned short>;
template<> class numeric_limits<int>;

template<>
class numeric_limits<unsigned int>
{
public:
	static constexpr unsigned int min() noexcept
	{
		return 0;
	}

	static constexpr unsigned int max() noexcept
	{
		return UINT_MAX;
	}

	static constexpr int digits = CHAR_BIT * sizeof(int);
};

template<> class numeric_limits<long>;

template<>
class numeric_limits<unsigned long>
{
public:
	static constexpr unsigned long min() noexcept
	{
		return 0;
	}

	static constexpr unsigned long max() noexcept
	{
		return ULONG_MAX;
	}

	static constexpr int digits = CHAR_BIT * sizeof(long);
};

template<> class numeric_limits<long long>;

template<>
class numeric_limits<unsigned long long>
{
public:
	static constexpr unsigned long long min() noexcept
	{
		return 0;
	}

	static constexpr unsigned long long max() noexcept
	{
		return ULLONG_MAX;
	}

	static constexpr int digits = CHAR_BIT * sizeof(long long);
};

template<> class numeric_limits<float>;
template<> class numeric_limits<double>;
template<> class numeric_limits<long double>;

}
