/*
 * Copyright (c) 2016-2021 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstddef>
#include <utility>

namespace std {

template <class T>
class _list_node
{
public:
	typedef _list_node<T> _self;
	_list_node(T data, _self* prev, _self* next);
	T data;
	_self* prev;
	_self* next;
};

template <class T>
class _list_iterator
{
public:
	typedef T value_type;
	typedef value_type& reference;
	typedef value_type* pointer;
	typedef _list_node<T> _node;

	_list_iterator();
	_list_iterator(const _list_iterator& b);
	_list_iterator(_node* node);
	virtual ~_list_iterator();

	_list_iterator& operator=(const _list_iterator& b);

	bool operator==(const _list_iterator& b);
	bool operator!=(const _list_iterator& b);

	value_type& operator*();
	value_type& operator->();

	_list_iterator& operator++();
	_list_iterator& operator--();
	_list_iterator operator++(int);
	_list_iterator operator--(int);

	void swap(_list_iterator& b);

	_node* node;
};

template <class T>
class _list_const_iterator : public _list_iterator<T>
{
public:
	typedef const T value_type;
	typedef value_type& reference;
	typedef value_type* pointer;
	typedef const _list_node<T> _node;
	typedef _list_iterator<T> iterator;

	//_list_const_iterator();
	_list_const_iterator(const iterator& b);
	//_list_const_iterator(const _list_const_iterator& b);
	//~_list_const_iterator();

	//_list_const_iterator& operator=(const _list_const_iterator&b);

	//bool operator==(const _list_const_iterator& b);
	//bool operator!=(const _list_const_iterator& b);

	reference operator*();
	reference operator->();

	//_list_const_iterator& operator++();
	//_list_const_iterator& operator--();
	//_list_const_iterator operator++(int);
	//_list_const_iterator operator--(int);

	//void swap(_list_const_iterator& b);

	//_node* node;
};


template <class T>
class list
{
public:
	typedef T value_type;
	typedef value_type& reference;
	typedef const reference const_reference;
	typedef value_type* pointer;
	typedef _list_iterator<T> iterator;
	typedef _list_const_iterator<T> const_iterator;
	typedef size_t size_type;
	typedef typename iterator::_node _node;

	list();
	list(const list& x);
	~list();

	list& operator= (const list& x);
	list& operator= (list&& x);

	iterator begin() noexcept;
	const_iterator begin() const noexcept;
	const_iterator cbegin() const noexcept;
	iterator end() noexcept;
	const_iterator end() const noexcept;
	const_iterator cend() const noexcept;

	bool empty() const;
	size_type size() const;

	reference front();
	reference back();

	void push_front(const_reference val);
	//void push_front(value_type&& val);
	void pop_front();
	void push_back(const_reference val);
	//void push_back(value_type&& val);
	void pop_back();

	iterator insert(iterator pos, const_reference val);
	iterator erase(iterator pos);
	void swap(list& x);
	void clear();

	void remove(const value_type& val);

private:
	iterator _begin;
	iterator _end;
	size_type _size;
};

}

#include "internal/list.tpp"
