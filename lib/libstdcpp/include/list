/*
 * Copyright (c) 2016-2023 Boulanger Guillaume, Chathura Namalgamuwa
 * The file is distributed under the MIT license
 * The license is available in the LICENSE file or at https://github.com/boulangg/phoenix/blob/master/LICENSE
 */

#pragma once

#include <cstddef>
#include <utility>

namespace std {

template <class T>
class _list_node
{
public:
    using value_type = T;
    using self_t = _list_node<value_type>;
    _list_node(value_type data, self_t* prev, self_t* next);
    value_type _data;
    self_t* _prev;
    self_t* _next;
};

template <class T>
class _list_iterator
{
public:
    using value_type = T;
    using reference = value_type&;
    using pointer = value_type*;
    using node_t = _list_node<T>;

    _list_iterator();
    _list_iterator(const _list_iterator& b);
    _list_iterator(node_t* node);
    virtual ~_list_iterator();

    _list_iterator& operator=(const _list_iterator& b);

    bool operator==(const _list_iterator& b);
    bool operator!=(const _list_iterator& b);

    value_type& operator*();
    value_type& operator->();

    _list_iterator& operator++();
    _list_iterator& operator--();
    _list_iterator operator++(int);
    _list_iterator operator--(int);

    void swap(_list_iterator& b);

    node_t* _node;
};

template <class T>
class _list_const_iterator : public _list_iterator<T>
{
public:
    using value_type = const T;
    using reference = value_type&;
    using pointer = value_type*;
    using node_t = const _list_node<T>;
    using iterator = _list_iterator<T>;

    //_list_const_iterator();
    _list_const_iterator(const iterator& b);
    //_list_const_iterator(const _list_const_iterator& b);
    //~_list_const_iterator();

    //_list_const_iterator& operator=(const _list_const_iterator&b);

    // bool operator==(const _list_const_iterator& b);
    // bool operator!=(const _list_const_iterator& b);

    reference operator*();
    reference operator->();

    //_list_const_iterator& operator++();
    //_list_const_iterator& operator--();
    //_list_const_iterator operator++(int);
    //_list_const_iterator operator--(int);

    // void swap(_list_const_iterator& b);

    //_node* node;
};

template <class T>
class list
{
public:
    using value_type = T;
    using reference = value_type&;
    using const_reference = const value_type&;
    using pointer = value_type*;
    using iterator = _list_iterator<T>;
    using const_iterator = _list_const_iterator<T>;
    using size_type = size_t;
    using node_t = typename iterator::node_t;

    list();
    list(const list& other);
    list(list&& other);

    ~list();

    list& operator=(list other);

    friend void swap<>(list& first, list& second);

    iterator begin() noexcept;
    const_iterator begin() const noexcept;
    const_iterator cbegin() const noexcept;
    iterator end() noexcept;
    const_iterator end() const noexcept;
    const_iterator cend() const noexcept;

    bool empty() const;
    size_type size() const;

    reference front();
    reference back();

    void push_front(const_reference val);
    // void push_front(value_type&& val);
    void pop_front();
    void push_back(const_reference val);
    // void push_back(value_type&& val);
    void pop_back();

    iterator insert(iterator pos, const_reference val);
    template <class InputIt>
    iterator insert(const_iterator pos, InputIt first, InputIt last);
    iterator erase(iterator pos);
    void swap(list& x);
    void clear();

    void remove(const value_type& val);

private:
    iterator _begin;
    iterator _end;
    size_type _size;
};

template <class T>
_list_node<T>::_list_node(_list_node::value_type data, _list_node::self_t* prev, _list_node::self_t* next) :
    _data(data), _prev(prev), _next(next)
{
    if (_prev == nullptr) {
        _prev = this;
    }
    if (_next == nullptr) {
        _next = this;
    }
}

template <class T>
_list_iterator<T>::_list_iterator() : _node()
{}

template <class T>
_list_iterator<T>::_list_iterator(const _list_iterator& b) : _node(b._node)
{}

template <class T>
_list_iterator<T>::_list_iterator(node_t* node) : _node(node)
{}

template <class T>
_list_iterator<T>::~_list_iterator()
{}

template <class T>
_list_iterator<T>& _list_iterator<T>::operator=(const _list_iterator<T>& b)
{
    _node = b._node;
    return *this;
}

template <class T>
bool _list_iterator<T>::operator==(const _list_iterator<T>& b)
{
    return _node == b._node;
}

template <class T>
bool _list_iterator<T>::operator!=(const _list_iterator<T>& b)
{
    return _node != b._node;
}

template <class T>
typename _list_iterator<T>::value_type& _list_iterator<T>::operator*()
{
    return _node->_data;
}

template <class T>
typename _list_iterator<T>::value_type& _list_iterator<T>::operator->()
{
    return *this;
}

template <class T>
_list_iterator<T>& _list_iterator<T>::operator++()
{
    _node = _node->_next;
    return *this;
}

template <class T>
_list_iterator<T>& _list_iterator<T>::operator--()
{
    _node = _node->_prev;
    return *this;
}

template <class T>
_list_iterator<T> _list_iterator<T>::operator++(int)
{
    _list_iterator tmp(*this);
    operator++();
    return tmp;
}

template <class T>
_list_iterator<T> _list_iterator<T>::operator--(int)
{
    _list_iterator tmp(*this);
    operator--();
    return tmp;
}

template <class T>
void _list_iterator<T>::swap(_list_iterator<T>& b)
{
    swap(_node, b._node);
}

template <class T>
_list_const_iterator<T>::_list_const_iterator(const iterator& b) : _list_iterator<T>(b)
{}

template <class T>
typename _list_const_iterator<T>::value_type& _list_const_iterator<T>::operator*()
{
    return iterator::operator*();
}

template <class T>
typename _list_const_iterator<T>::value_type& _list_const_iterator<T>::operator->()
{
    return iterator::operator->();
}

/*template <class T>
_list_const_iterator<T>::_list_const_iterator() : node() {}

template <class T>
_list_const_iterator<T>::_list_const_iterator(const _list_const_iterator& b) : node(b.node) {}

template <class T>
_list_const_iterator<T>::~_list_const_iterator() {}

template <class T>
_list_const_iterator<T> & _list_const_iterator<T>::operator=(const _list_const_iterator<T>& b) {
    node = b.node;
    return *this;
}

template <class T>
bool _list_const_iterator<T>::operator==(const _list_const_iterator<T>& b) {
    return node == b.node;
}

template <class T>
bool _list_const_iterator<T>::operator!=(const _list_const_iterator<T>& b) {
    return node != b.node;
}

template <class T>
typename _list_const_iterator<T>::value_type& _list_const_iterator<T>::operator*() {
    return node->data;
}

template <class T>
typename _list_const_iterator<T>::value_type& _list_const_iterator<T>::operator->() {
    return *this;
}

template <class T>
_list_const_iterator<T>& _list_const_iterator<T>::operator++() {
    node = node->next;
    return *this;
}

template <class T>
_list_const_iterator<T>& _list_const_iterator<T>::operator--() {
    node = node->prev;
    return *this;
}

template <class T>
_list_const_iterator<T> _list_const_iterator<T>::operator++(int) {
    _list_const_iterator tmp(*this);
    operator++();
    return tmp;
}

template <class T>
_list_const_iterator<T> _list_const_iterator<T>::operator--(int) {
    _list_const_iterator tmp(*this);
    operator--();
    return tmp;
}

template <class T>
void _list_const_iterator<T>::swap(_list_const_iterator<T>& b) {
    swap(node, b.node);
}*/

template <class T>
list<T>::list() : _begin(), _end(), _size(0)
{
    node_t* node = new node_t(T(), 0, 0);
    _begin._node = node;
    _end._node = node;
}

template <class T>
list<T>::list(const list& other) : list<T>()
{
    for (auto item : other) {
        push_back(item);
    }
}

template <class T>
list<T>::list(list&& other) : list<T>()
{
    swap(*this, other);
}

template <class T>
list<T>::~list()
{
    clear();
}

template <class T>
list<T>& list<T>::operator=(list<T> other)
{
    swap(*this, other);
    return *this;
}

template <class T>
void swap(list<T> first, list<T> second)
{
    // enable ADL
    using std::swap;

    swap(first._begin, second._begin);
    swap(first._end, second._end);
    swap(first._size, second._size);
}

template <class T>
typename list<T>::iterator list<T>::begin() noexcept
{
    return _begin;
}

template <class T>
typename list<T>::const_iterator list<T>::begin() const noexcept
{
    return const_iterator(_begin);
}

template <class T>
typename list<T>::const_iterator list<T>::cbegin() const noexcept
{
    return const_iterator(_begin);
}

template <class T>
typename list<T>::iterator list<T>::end() noexcept
{
    return _end;
}

template <class T>
typename list<T>::const_iterator list<T>::end() const noexcept
{
    return const_iterator(_end);
}

template <class T>
typename list<T>::const_iterator list<T>::cend() const noexcept
{
    return const_iterator(_end);
}

template <class T>
bool list<T>::empty() const
{
    return _size == 0;
}

template <class T>
typename list<T>::size_type list<T>::size() const
{
    return _size;
}

template <class T>
typename list<T>::reference list<T>::front()
{
    return *_begin;
}

template <class T>
typename list<T>::reference list<T>::back()
{
    iterator it = _end;
    return *(--it);
}

template <class T>
void list<T>::push_front(list<T>::const_reference val)
{
    insert(_begin, val);
}

/*template <class T>
void list<T>::push_front(list<T>::value_type&& val) {
    insert(_begin, val);
}*/

template <class T>
void list<T>::pop_front()
{
    erase(_begin);
}

template <class T>
void list<T>::push_back(list<T>::const_reference val)
{
    insert(_end, val);
}

/*template <class T>
void list<T>::push_back(list<T>::value_type&& val) {
    insert(_end, val);
}*/

template <class T>
void list<T>::pop_back()
{
    remove(_end);
}

template <class T>
typename list<T>::iterator list<T>::insert(iterator pos, const_reference val)
{
    if (pos == _begin) {
        node_t* curr = new node_t(val, nullptr, _begin._node);
        _begin._node->_prev = curr;
        _begin._node = curr;
        ++_size;
        return _begin;
    } else {
        node_t* prev = pos._node->_prev;
        node_t* next = pos._node;
        node_t* curr = new node_t(val, prev, next);
        prev->_next = curr;
        next->_prev = curr;
        ++_size;
        iterator res(curr);
        return res;
    }
}

template <class T>
template <class InputIt>
list<T>::iterator list<T>::insert(const_iterator pos, InputIt first, InputIt last)
{
    while (first != last) {
        pos = insert(pos, *first);
        ++first;
    }

    return pos;
}

template <class T>
typename list<T>::iterator list<T>::erase(iterator pos)
{
    if (_size == 0) {
        return _end;
    }
    if (pos == _end) {
        return _end;
    }
    if (pos == _begin) {
        node_t* curr = pos._node;
        node_t* next = pos._node->_next;
        next->_prev = next;
        _begin = next;
        --_size;
        delete curr;
        return _begin;
    } else {
        node_t* prev = pos._node->_prev;
        node_t* curr = pos._node;
        node_t* next = pos._node->_next;
        prev->_next = next;
        next->_prev = prev;
        --_size;
        delete curr;
        iterator res(next);
        return res;
    }
}

template <class T>
void list<T>::swap(list& x)
{
    std::swap(_begin, x._begin);
    std::swap(_end, x._end);
    std::swap(_size, x._size);
}

template <class T>
void list<T>::clear()
{
    while (size()) {
        pop_front();
    }
}

template <class T>
void list<T>::remove(const value_type& val)
{
    for (auto it = begin(); it != end(); it++) {
        if (*it == val) {
            it = erase(it);
        }
    }
}

}
